substitutions:
  pool_sensor_id: pool_virtual

packages:
  ${pool_id}_valve: !include
    file: valve/pool_valve.yaml
    vars:
      id: ${pool_id}
      upper_id: ${pool_upper_id}
      sensor_id: ${pool_sensor_id}
      manual_max_duration: ${pool_manual_max_duration}
      relay_pin: ${pool_valve_pin}
      text_on_update: ${pool_text_on_update}
      text_off_update: ${pool_text_off_update}
      automation_check: ${pool_automation_check}
      left_update: ${pool_left_update}
      morning_initial_option: ${pool_morning_initial_option}
      afternoon_initial_option: ${pool_afternoon_initial_option}
  automatic_mode_switch: !include
    file: ../common/time_controlled_entity/automatic_mode_switch.yaml
    vars:
      id: ${pool_id}
      upper_id: ${pool_upper_id}

api:
  services:
    - service: filling_start
      then:
        - switch.turn_on: ${pool_id}_virtual
    - service: request_pool_water
      then:
        - lambda: |-
            id(${pool_id}_filling_requested) = true;
            id(${pool_id}_update_time).execute();
        - homeassistant.service:
            service: esphome.pool_filling_requested
    - service: request_more_pool_water
      then:
        - lambda: |-
            id(${pool_id}_timestamps_off).publish_state(add_two_minutes_from_now());

# ============================================================================ #
globals:
  ## Bool to save if pool filling requested when the device is restarted
  - id: ${pool_id}_filling_requested
    type: bool
    restore_value: True
    
# ============================================================================ #
script:
  # Script to execute when pool starts to fill
  - id: pool_filling_now
    then:
      - homeassistant.service: # Turns off the pump and then opens the valve
          service: esphome.pool_filling_start
  - id: ${pool_id}_update_time
    then:
      - lambda:
          if (!id(${pool_id}_automatic_mode).state) {
            id(${pool_id}_filling_requested) = false; }
          if (id(${pool_id}_filling_requested) && id(${pool_id}_automatic_mode).state) {
            int hour_morning = atoi(((id(${pool_id}_morning_time).state).substr(0,2)).c_str());
            int minute_morning = atoi(((id(${pool_id}_morning_time).state).substr(3,2)).c_str());
            int hour_afternoon = atoi(((id(${pool_id}_afternoon_time).state).substr(0,2)).c_str());
            int minute_afternoon = atoi(((id(${pool_id}_afternoon_time).state).substr(3,2)).c_str());

            time_t aux = get_next_time_at(hour_morning, minute_morning, hour_afternoon, minute_afternoon);
            id(${pool_id}_timestamps_on).publish_state(to_string(aux));
            id(${pool_id}_timestamps_off).publish_state(to_string(aux + 2 * 60)); }
          else {
            id(${pool_id}_timestamps_on).publish_state("");
            id(${pool_id}_timestamps_off).publish_state(""); }

# ============================================================================ #
switch:
  - platform: template
    name: ${pool_upper_id} filling manual
    id: ${pool_id}_manual
    lambda: return (id(${pool_id}_virtual).state);
    optimistic: True
    turn_on_action:
      - lambda: |-
          id(${pool_id}_timestamps_off).publish_state(manual_set(id(${pool_id}_manual_duration).state, id(${pool_id}_timestamps_off).state));
      - homeassistant.service:
          service: esphome.pool_manual_filling_start
    turn_off_action:
      - switch.turn_off: ${pool_id}_virtual
      - lambda: |-
          id(${pool_id}_timestamps_off).publish_state(delete_first_timestamp(id(${pool_id}_timestamps_off).state));

# ============================================================================ #
text_sensor:
  #### Pool filling readable state
  - platform: template
    name: Estado del llenado
    id: ${pool_id}_state
    update_interval: never
    icon: mdi:waves-arrow-up
    lambda: |-
      if (!id(${irrigation_id}_available).state && id(${pool_id}_virtual).state)
        return {"Â¡Error!"};
      if (id(${irrigation_id}_available).state && id(${pool_id}_virtual).state)
        return {"Llenando..."};
      if(id(${irrigation_id}_available).state && !(id(${north_id}_virtual).state || id(${south_id}_virtual).state)) 
        return {"Disponible"};
      return {"No disponible"};

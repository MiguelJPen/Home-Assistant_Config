esphome:
  on_boot:
    priority: 800.0
    then:
      - delay: 20s
      - lambda: |-
          id(secure_pumping) = id(${pool_id}_low_level).state;
      - script.execute: ${pump_id}_update_time

packages:
  pump_text_sensor: !include
    file: ../../common/time_controlled_entity/text_sensor.yaml
    vars:
      id: ${pump_id}
      upper_id: ${pump_upper_id}
      text_on_update: ${pump_text_on_update}
      text_off_update: ${pump_text_off_update}
  pump_next_duration: !include
    file: ../../common/time_controlled_entity/next_duration_sensor.yaml
    vars:
      id: ${pump_id}
      upper_id: ${pump_upper_id}

# ============================================================================ #
script:
  - id: ${pump_id}_update_time
    then:
      - lambda: |-
          if(id(pump_winter_mode_bool)) {
            pair<string,string> winter_time = get_winter_pumping_time(30);

            id(${pump_id}_timestamps_on).publish_state(winter_time.first);
            id(${pump_id}_timestamps_off).publish_state(winter_time.second); 
          }
          else if (id(pump_automation_bool)) {
            pair<string,string> automatic_time = get_automatic_pumping_time(id(mean_temp));

            id(${pump_id}_timestamps_on).publish_state(automatic_time.first);
            id(${pump_id}_timestamps_off).publish_state(automatic_time.second); 
          }
          else if (id(pump_automation_full_bool)) {
            pair<string,string> automatic_full_time = get_automatic_full_pumping_time();

            id(${pump_id}_timestamps_on).publish_state(automatic_full_time.first);
            id(${pump_id}_timestamps_off).publish_state(automatic_full_time.second);
          }
          else {
            id(${pump_id}_timestamps_on).publish_state("");
            id(${pump_id}_timestamps_off).publish_state("");
          }
      - script.execute: ${pump_id}_check_if_on
  - id: ${pump_id}_check_if_on
    then:
      - delay: 300ms
      - lambda: |-
          if(id(pump_next_on).state != "Sin programaciones" && id(pump_next_off).state != "Sin programaciones" &&
            id(pump_next_on).state > id(pump_next_off).state && !id(filling_rn) && 
            ((id(secure_pumping) && (id(pump_automation_bool) || id(pump_automation_full_bool))) || id(pump_winter_mode_bool)))
              id(${pump_id}).turn_on();
          else id(${pump_id}).turn_off();

# ============================================================================ #
globals:
  ## Bool to save virtual switches states
  - id: pump_automation_bool
    type: bool
    restore_value: yes
  - id: pump_automation_full_bool
    type: bool
    restore_value: yes
  - id: pump_winter_mode_bool
    type: bool
    restore_value: yes

# ============================================================================ #
sensor:
  ## Countdown sensor
  - platform: template
    name: ${pump_upper_id} left
    id: pump_left
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: min
    icon: mdi:timer-outline
    lambda: |-
      if (id(${pump_id}).state && (id(pump_automation_bool) || id(pump_winter_mode_bool) || id(pump_automation_full_bool))) {
        return ((atoi((id(pump_next_off).state).c_str()) - id(time_pump).now().timestamp) / 60) + 1;
      }
      return 0;

# ============================================================================ #
switch:
  #### Manual switch for pump
  - platform: template
    name: ${pump_upper_id}
    id: ${pump_id}_manual
    icon: mdi:pump
    lambda: return id(${pump_id}).state;
    turn_on_action:
      - switch.turn_on: ${pump_id}
      - lambda: |-
          id(pump_automation_bool) = false;
          id(pump_automation_full_bool) = false;
          id(pump_winter_mode_bool) = false;
    turn_off_action:
      - switch.turn_off: ${pump_id}
      - lambda: |-
          id(pump_automation_bool) = false;
          id(pump_automation_full_bool) = false;
          id(pump_winter_mode_bool) = false;

  #### Switch for automation
  - platform: template
    name: ${pump_upper_id} automation
    icon: mdi:refresh-auto
    id: pump_automation
    lambda: return id(pump_automation_bool);
    turn_on_action:
      - lambda: |-
          id(pump_winter_mode_bool) = false;
          id(pump_automation_full_bool) = false;
          id(pump_automation_bool) = true;
      - script.execute: ${pump_id}_update_time
    turn_off_action:
      - lambda: |-
          id(pump_automation_bool) = false;
      - script.execute: ${pump_id}_update_time

  #### Switch for pump running full time, but still turning off with no water
  - platform: template
    name: ${pump_upper_id} full time
    icon: mdi:clock-fast
    id: pump_automation_full
    lambda: return id(pump_automation_full_bool);
    turn_on_action:
      - lambda: |-
          id(pump_automation_bool) = false;
          id(pump_winter_mode_bool) = false;
          id(pump_automation_full_bool) = true;
      - script.execute: ${pump_id}_update_time
    turn_off_action:
      - lambda: |-
          id(pump_automation_full_bool) = false;
      - script.execute: ${pump_id}_update_time

  #### Winter mode switch, do not check pool level
  - platform: template
    name: Winter mode
    id: pump_winter_mode
    icon: mdi:snowflake
    lambda: return id(pump_winter_mode_bool);
    turn_on_action:
      - lambda: |-
          id(pump_automation_bool) = false;
          id(pump_automation_full_bool) = false;
          id(pump_winter_mode_bool) = true;
      - script.execute: ${pump_id}_update_time
    turn_off_action:
      - lambda: |-
          id(pump_winter_mode_bool) = false;
      - script.execute: ${pump_id}_update_time

# ============================================================================ #
# Cron jobs
time:
  - platform: homeassistant
    id: time_pump
    timezone: Europe/Madrid
    on_time:
      - seconds: ${update_pumping_times}
        minutes: 30
        hours: 0
        then:
          - script.execute: ${pump_id}_update_time
      - seconds: ${pump_left_update}
        minutes: /1
        then:
          - component.update: pump_left
      - seconds: ${pump_automation_check}
        minutes: /1
        then:
          - lambda: |-
              if ((id(pump_winter_mode_bool) || (id(secure_pumping) && (id(pump_automation_bool) || id(pump_automation_full_bool)))) && !id(filling_rn) && scheduled_run(id(${pump_id}_next_on).state.c_str()))
                id(${pump_id}).turn_on();
              if ((id(pump_winter_mode_bool) || id(pump_automation_bool || id(pump_automation_full_bool))) && scheduled_run(id(${pump_id}_next_off).state.c_str()))
                id(${pump_id}).turn_off();
